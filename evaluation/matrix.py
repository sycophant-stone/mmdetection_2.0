import numpy as np
np.set_printoptions(suppress=True) # result not showed as science format.
import evaluation.metric as metric
from evaluation.data_reader import get_box_from_str_format
from helper.log_table import LogTable

def calc_match_matrix(src_gtbboxes, src_predbboxes, src_filter_conf):
    '''
    calculate the match matrix's cols and rows.
    :param gtbboxes:
    :param predbboxes:
    :param filter_conf:
    :return:
    '''
    np_src_gtbboxes = np.array(src_gtbboxes)
    np_src_predboxes = np.array(src_predbboxes)
    # # print("np_src_gtbboxes: ", np_src_gtbboxes)
    # # print("np_src_predboxes: ", np_src_predboxes)
    match_matrix=[]
    for gtbox in src_gtbboxes:
        np_gtbox = np.array(gtbox)
        np_gtbox = np.expand_dims(np_gtbox, axis=0)
        match_matrix_temp = metric.vector_iou(np_gtbox, np_src_predboxes)
        match_matrix.append(match_matrix_temp)

    # # print("np_src_gtbboxes :", np_src_gtbboxes)
    # # print("np_src_predboxes :", np_src_predboxes)
    # # print("match_matrix : ", match_matrix)
    # # print("match_matrix's shape: ", match_matrix.shape)

    # raise Exception("show .. stop ..")
    return match_matrix

def filter_on_matrix(src_matrix,
                     src_topk,
                     src_thresh_high,
                     src_thresh_low,
                     src_predbboxes="",
                     src_conf_thresh_high=0.8,
                     src_conf_thresh_low=0.2):
    '''
    suppose src_matrix shape is [m, n]
    for every m(means, gt object).
        check n items.
        keep conf >= topk,
        fix:
             not the TopK, should be the conf_threshold instead.
        &&
        keep iout >= iou_threshold.
    :param src_matrix:
    :return:
    '''

    results = []
    m = len(src_matrix)
    for obj_index,row in enumerate(src_matrix): # iou value
        n = len(row)
        nprow = np.array(row)
        # print("m:%s, n:%s"%(m,n))
        res_row = np.where(nprow>src_thresh_high, nprow, [0]) # filter those iou below threshold.
        if np.sum(res_row)==0:
            res_row = np.where(nprow > src_thresh_low, nprow, [0])  # filter those iou below threshold.
        if np.sum(res_row)==0:
            print("warning! neither high(%s) and low(%s) thresh is covered! "%(src_thresh_high, src_thresh_low))
        # conf_list = src_predbboxes[:,-1]
        # print("objid: %s, res_row: %s"%(obj_index, res_row))
        src_predbboxes = np.array(src_predbboxes)
        conf_list = src_predbboxes[:,-1]
        conf_list = np.array(conf_list)
        # print("objid: %s, conf_list:%s"%(obj_index, conf_list))
        conf_inds = np.where(conf_list>src_conf_thresh_high)
        # print("objid: %s, src_conf_thresh_high: %s, conf_inds: %s"%(obj_index, src_conf_thresh_high, conf_inds))
        if np.sum(conf_inds)==0 or np.sum(res_row[conf_inds])==0:
            # print("conf high thresh(%s) is not statisfied. try low conf to level up recall"%(src_conf_thresh_high))
            conf_inds = np.where(conf_list>src_conf_thresh_low)

        debug_conf=[]
        debug_iou=[]
        if np.sum(conf_inds) == 0:
            print("warning! neither conf high(%s) or low(%s) is satisfied by prediction results."%(src_conf_thresh_high, src_conf_thresh_low))
        else:
            # print("conf satisfied are: %s, corresponding iou are: %s"%(conf_list[conf_inds], res_row[conf_inds]))
            debug_conf = conf_list[conf_inds]
            debug_iou = res_row[conf_inds]
            conf_inds = np.squeeze(conf_inds) # need downsize the dim of `conf_inds` for iteration of conf_inds.
            # print("conf_inds: ", conf_inds)
            # print("before res_row: ", res_row)
            for idx,value in enumerate(res_row):
                # print("idx: %s, value: %s, conf_inds: %s, typeof conf_inds: %s"%(idx, value, conf_inds, type(conf_inds)))
                if idx in conf_inds:
                    # print("statisfied idx:%s pass"%(idx))
                    continue
                else:
                    # print("origin res_row[%s]: %s"%(idx, res_row[idx]))
                    res_row[idx] = 0
            # print("after res_row: ", res_row)
        # print("res_row : ", res_row)
        # print("res_row[-src_topk:] : ", res_row[-src_topk:])
        # print("np.sum(res_row[-src_topk:])  : ", np.sum(res_row[-src_topk:]))
        if np.sum(res_row[-src_topk:]) !=0:
            res_row[:-src_topk]=0 # filter those below topK.
        elif np.sum(res_row)!=0:
            print("topK(%s) not satisfied. using high/low thresh res instead."%(src_topk))
        else:
            print("all threshold arn't satisfied! detail info:")
            lt = LogTable(["Item", "obj#", "value"])
            lt.add_line(["conf thresh filter res","obj%s"%(obj_index), debug_conf])
            lt.add_line(["iou  thresh filter res","obj%s"%(obj_index), debug_iou])
            lt.show()

        results.append(res_row)

    return results

def Test_filter_on_matrix():
    src_input_matrix=[[0.        , 0.2264794 , 0.        , 0.10825428, 0.        ,
       0.24252681, 0.14584546, 0.01008198, 0.        , 0.20010112,
       0.24416205, 0.13844181, 0.37918461, 0.        , 0.26786171,
       0.44310333, 0.07660606, 0.        , 0.25876598, 0.0369061 ,
       0.37062608, 0.1363379 , 0.21708905, 0.        , 0.        ,
       0.        , 0.13650184, 0.00740176, 0.        , 0.        ,
       0.        , 0.1418654 , 0.06744368, 0.03955061, 0.        ,
       0.        , 0.24039371, 0.06953034, 0.22934631, 0.11010704,
       0.        , 0.        , 0.24951042, 0.04156136, 0.14662641,
       0.        , 0.08667882, 0.12870955, 0.02181104, 0.05718409,
       0.14127288, 0.        , 0.02651081, 0.        , 0.37274732,
       0.3382099 , 0.        , 0.27799451, 0.35213376, 0.        ,
       0.04419434, 0.        , 0.01932954, 0.41875443, 0.21217768,
       0.08778393, 0.        , 0.0090979 , 0.        , 0.550549  ,
       0.29533399, 0.        , 0.18452636, 0.42602354, 0.53174249,
       0.86426818]]
    # the result should be :
    # array([0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.        ,
    #       0.        , 0.        , 0.        , 0.        , 0.53174249,
    #       0.86426818])

    res = filter_on_matrix(src_matrix=np.array(src_input_matrix), src_topk=5, src_thresh_high=0.5, src_thresh_low=0.1)
    print(res)


def Test_filter_on_matrix_with_ext_params():
    imgid = 16053
    src_input_matrix = [[0.        , 0.06256896, 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.20683748, 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.04038706, 0.        , 0.        ,
       0.        , 0.        , 0.56323138, 0.09690624, 0.00832687,
       0.12185781, 0.01150127, 0.        , 0.        , 0.1239633 ,
       0.19338027, 0.28292946, 0.        , 0.        , 0.        ,
       0.07134699, 0.        , 0.        , 0.        , 0.        ,
       0.33620395, 0.        , 0.42472253, 0.05240676, 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.11402894,
       0.79998463, 0.        , 0.        , 0.00890927, 0.        ,
       0.        , 0.05629162, 0.        ],
                        [0.        , 0.11483244, 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.04086546, 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.12653578, 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.10704233, 0.        , 0.        ,
       0.        , 0.        , 0.03571256, 0.10035868, 0.07862171,
       0.19410769, 0.        , 0.        , 0.        , 0.37134588,
       0.38446287, 0.10925962, 0.03977258, 0.        , 0.23803643,
       0.43260205, 0.13220387, 0.08717287, 0.25758624, 0.        ,
       0.20001051, 0.07612219, 0.14893654, 0.18329501, 0.01931439,
       0.00697059, 0.17481233, 0.31322413, 0.        , 0.54002117,
       0.09696909, 0.36253897, 0.        , 0.83810576, 0.08267072,
       0.        , 0.48413855, 0.28057572],
                        [0.        , 0.0985489 , 0.00210108, 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.02734984,
       0.        , 0.        , 0.3109055 , 0.        , 0.        ,
       0.11313437, 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.05194065, 0.        , 0.        ,
       0.        , 0.13917199, 0.        , 0.03989281, 0.11162788,
       0.03567086, 0.03719532, 0.        , 0.        , 0.02798758,
       0.09606752, 0.        , 0.16944598, 0.        , 0.27602656,
       0.1618913 , 0.64217829, 0.1508468 , 0.20816255, 0.01712919,
       0.        , 0.55369104, 0.        , 0.23935421, 0.09069705,
       0.17605479, 0.39395097, 0.30530629, 0.        , 0.05385712,
       0.        , 0.51460461, 0.10352659, 0.21220047, 0.3196888 ,
       0.04213827, 0.39823962, 0.77088083],
                        [0.        , 0.08235458, 0.        , 0.        , 0.        ,
       0.        , 0.19091079, 0.        , 0.08854798, 0.        ,
       0.        , 0.        , 0.05768018, 0.        , 0.        ,
       0.        , 0.        , 0.00360427, 0.        , 0.        ,
       0.36629871, 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.09869003, 0.        , 0.        , 0.01569236,
       0.        , 0.        , 0.        , 0.        , 0.        ,
       0.        , 0.        , 0.00814975, 0.        , 0.21379279,
       0.        , 0.04876294, 0.20386187, 0.        , 0.51271577,
       0.        , 0.19032792, 0.        , 0.02300179, 0.        ,
       0.74306647, 0.09204318, 0.06830483, 0.28191707, 0.        ,
       0.        , 0.01382016, 0.41639391, 0.        , 0.30308479,
       0.63133969, 0.06663498, 0.1125051 ]]

    src_str_pred = ['0.0,239.1175994873047,73.45394897460938,300.0,0.005271418951451778', '3.1226730346679688,0.0,300.0,300.0,0.006693789269775152', '9.02630615234375,98.96682739257812,182.98297119140625,299.35064697265625,0.009456862695515156', '0.0,4.178581237792969,175.08767700195312,234.33653259277344,0.010087458416819572', '53.16227340698242,61.28009796142578,175.61932373046875,181.49850463867188,0.011050102300941944', '23.182621002197266,110.46942138671875,117.08157348632812,237.706787109375,0.01175266969949007', '171.4991455078125,0.0,291.69122314453125,64.5930290222168,0.011788886040449142', '92.16185760498047,237.62197875976562,239.3297119140625,298.146240234375,0.011848647147417068', '262.1875915527344,0.3136725425720215,300.0,45.763427734375,0.01205371506512165', '0.0,0.0,57.93636703491211,84.95472717285156,0.01212143711745739', '32.76831817626953,0.0,138.11407470703125,64.0896987915039,0.01242724247276783', '39.47505569458008,28.729026794433594,138.18341064453125,132.8697967529297,0.012757415883243084', '138.9680938720703,0.0,245.16067504882812,75.53770446777344,0.01297465618699789', '16.961395263671875,60.99974822998047,118.08314514160156,170.19772338867188,0.013663534075021744', '62.423927307128906,4.704441070556641,208.4366912841797,129.52447509765625,0.014877250418066978', '2.918437957763672,21.479049682617188,82.13972473144531,122.94584655761719,0.01490559708327055', '0.0,145.34902954101562,46.207881927490234,279.724609375,0.01603037863969803', '152.74911499023438,119.12344360351562,232.58346557617188,214.29006958007812,0.016165154054760933', '58.9592170715332,180.51463317871094,166.59625244140625,299.67742919921875,0.01740134321153164', '23.61357879638672,7.358379364013672,121.3320083618164,108.87445068359375,0.01824818179011345', '149.841064453125,0.9906578063964844,300.0,133.34970092773438,0.019046008586883545', '70.83633422851562,0.0,174.64065551757812,53.86650848388672,0.019086115062236786', '0.0,65.77618408203125,54.293434143066406,177.66969299316406,0.019147582352161407', '46.919090270996094,0.0,117.55354309082031,34.527809143066406,0.019337955862283707', '82.76834106445312,0.0,211.16036987304688,75.38059997558594,0.019836075603961945', '0.0,17.02102279663086,41.72169494628906,121.51947784423828,0.02056341990828514', '0.0,103.38835906982422,64.46746826171875,241.552978515625,0.020836057141423225', '133.40023803710938,176.19667053222656,221.8264923095703,264.02825927734375,0.02138199657201767', '41.980445861816406,196.40676879882812,109.73435974121094,261.0045166015625,0.02140747383236885', '76.45553588867188,0.0,143.44744873046875,33.97233581542969,0.02152535319328308', '14.278797149658203,237.36367797851562,156.26150512695312,300.0,0.021721165627241135', '112.19196319580078,16.87286376953125,250.69732666015625,151.316162109375,0.02309020422399044', '137.8760986328125,249.53115844726562,281.3625793457031,299.2463684082031,0.023272452875971794', '84.71659851074219,176.44580078125,231.96127319335938,296.41302490234375,0.02360437624156475', '33.62661361694336,47.508392333984375,237.3125457763672,256.29888916015625,0.026528842747211456', '155.65625,187.50631713867188,242.28323364257812,275.29742431640625,0.026884274557232857', '71.43678283691406,133.75933837890625,197.63516235351562,280.0582275390625,0.02729823626577854', '0.0,186.18161010742188,61.25539779663086,300.0,0.028874367475509644', '58.59347152709961,57.329185485839844,73.58993530273438,73.93375396728516,0.029331952333450317', '241.7769317626953,186.39430236816406,300.0,267.8807373046875,0.02966958098113537', '140.87399291992188,173.146240234375,289.5570373535156,284.0269470214844,0.03086293302476406', '159.5987091064453,219.32798767089844,244.64083862304688,297.0985107421875,0.031774528324604034', '85.02052307128906,47.93960189819336,230.7775421142578,191.08795166015625,0.03401466831564903', '2.909709930419922,212.7034454345703,106.9945297241211,299.7376708984375,0.035945769399404526', '155.83535766601562,10.037590026855469,294.7207336425781,237.87789916992188,0.036087580025196075', '169.21957397460938,166.7960662841797,265.4326477050781,260.94744873046875,0.03710535541176796', '174.2278289794922,103.86663055419922,252.53485107421875,190.2957763671875,0.03805075213313103', '254.73300170898438,87.30091857910156,298.1072692871094,177.95358276367188,0.03881312906742096', '165.0011749267578,156.05181884765625,244.62759399414062,230.06591796875,0.040689121931791306', '210.93533325195312,2.017049789428711,300.0,106.6782455444336,0.041106369346380234', '216.7771453857422,221.20201110839844,284.3566589355469,284.8482360839844,0.042383335530757904', '185.600830078125,80.53021240234375,277.7904052734375,168.93905639648438,0.053043514490127563', '239.60409545898438,224.90435791015625,298.0545654296875,298.3125915527344,0.053810738027095795', '98.81513977050781,102.84236907958984,255.34811401367188,272.373291015625,0.05444227531552315', '73.159423828125,81.39610290527344,207.52883911132812,228.30429077148438,0.06956573575735092', '223.40762329101562,26.43700408935547,298.1065673828125,153.83030700683594,0.08508964627981186', '133.64956665039062,73.45805358886719,267.5548095703125,217.89529418945312,0.08998385071754456', '231.67514038085938,118.04031372070312,299.8408508300781,210.51084899902344,0.09492940455675125', '248.79530334472656,2.1004409790039062,300.0,74.07538604736328,0.1032799631357193', '205.24551391601562,186.12060546875,287.03973388671875,262.896484375,0.11158397793769836', '201.34483337402344,242.63148498535156,298.3915710449219,299.16510009765625,0.13734784722328186', '172.48460388183594,125.70243835449219,273.873291015625,226.6983184814453,0.1433744579553604', '250.70286560058594,60.417449951171875,298.8541564941406,149.279052734375,0.14411184191703796', '208.79391479492188,150.7262420654297,300.0,249.43328857421875,0.1516917496919632', '221.9336395263672,82.78163146972656,294.8183898925781,169.32534790039062,0.16295988857746124', '248.96148681640625,20.93783950805664,300.0,122.43425750732422,0.26462996006011963', '164.87637329101562,105.79060363769531,300.0,261.02093505859375,0.39294540882110596', '185.3210906982422,100.78096008300781,289.391357421875,204.10162353515625,0.4945583939552307']
    pred_bboxes = [get_box_from_str_format(strb) for strb in src_str_pred]
    print("pred_bboxes: ", pred_bboxes)
    res = filter_on_matrix(src_matrix=np.array(src_input_matrix),
                           src_topk=5,
                           src_thresh_high=0.5,
                           src_thresh_low=0.1,
                           src_predbboxes = pred_bboxes,
                           src_conf_thresh_high = 0.8,
                           src_conf_thresh_low = 0.2)

    print(res)


def statistic_on_matrix(src_matrix):
    '''
    statistic
    i)  how many valid predctions for each object
        the TP, FP, FN default value are 0.
    ii) if POS nums > 1:
            TP = 1  # only save the highest conf value.
            FP = POS - 1
    iii) if POS ==0:
            FN = 1

    return a matrix
         TP   FP   FN
    gt0  1    1    0
    gt1
    ...

    :param src_matrix:
    :return:
    '''
    tfpn_statistic_map={}
    m = len(src_matrix)
    for objidx, row in enumerate(src_matrix):
        n = len(row)
        tp=fp=fn=0
        # print("m:%s, n:%s"%(m,n))
        nprow = np.array(row)
        # print("nprow:%s"%(nprow))
        valid_ind = np.reshape(np.nonzero(nprow),[-1]).astype(np.int32)
        # print("valid_ind :%s"%(valid_ind ))
        pos_num = len(valid_ind)
        # print("pos_num: %s"%(pos_num))
        if pos_num>1:
            tp=tp+1
            fp=pos_num-tp
        elif pos_num==1: # fix a bug.
            tp=tp+1
        elif pos_num==0:
            fn=fn+1
        tfpn_statistic_map[objidx]="%s,%s,%s"%(tp,fp,fn)

    return tfpn_statistic_map



def Test_statistic_on_matrix():
    input_src_matrix=[[0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.        ,
                       0.        , 0.        , 0.        , 0.        , 0.53174249,
                       0.86426818]]
    tfpn_results = statistic_on_matrix(src_matrix=input_src_matrix)
    print(tfpn_results)


def get_tfpn_from_string(src_tfpn_string):
    '''
    get tp,fp,fn from string.
    :param src_tfpn_string:
    :return:
    '''
    try:
        tp,fp,fn = src_tfpn_string.split(',')
        return int(tp), int(fp), int(fn)
    except:
        raise Exception("%s format is invalid. Should be '0,0,1' "%(src_tfpn_string))


def Test_get_tfpn_from_string():
    tp,fp,fn = get_tfpn_from_string('0,0,1')
    print("tp:%s, fp:%s, fn:%s"%(tp,fp,fn))

if __name__=='__main__':
    # Test_filter_on_matrix()
    # Test_statistic_on_matrix()
    # Test_get_tfpn_from_string()
    Test_filter_on_matrix_with_ext_params()